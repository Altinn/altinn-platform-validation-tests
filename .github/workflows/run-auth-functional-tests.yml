name: Auth - run k6 functional tests

on:
  workflow_dispatch:
    inputs:
      configFilePath:
        description: "Configuration file for the test runs"
        required: true
        default: "conf/auth.yaml"

  schedule:
    - cron: "*/15 * * * *"

permissions:
  id-token: write
  contents: read

jobs:
  k6-functional:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OIDC Login to Azure Public Cloud
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Populate kubeconfig with k6 context
        id: populate_kubeconfig_with_k6_context
        shell: bash
        run: |
          if ! az aks install-cli; then
            echo "Failed to install kubectl CLI"
            exit 1
          fi
          if ! az aks get-credentials --resource-group k6tests-rg --name k6tests-cluster; then
            echo "Failed to populate kubeconfig"
            exit 1
          fi
          if ! kubelogin convert-kubeconfig -l azurecli; then
            echo "Failed to convert kubeconfig"
            exit 1
          fi
      - name: Generate k8s manifests
        uses: Altinn/altinn-platform/actions/generate-k6-manifests@main
        with:
          config_file: "${{ inputs.configFilePath || 'conf/auth.yaml' }}" # No inputs when running as a cron

      - name: Apply k8s manifests
        shell: bash
        run: |
          # kubectl apply -f .dist/ -R
          kubectl --context k6tests-cluster apply --server-side -f .dist/at22-add-rm-revisorrole-for-client
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-post-consent
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-org
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-sysuser
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-user
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-pdp-authorize-enduser
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-connections
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-access-packages
