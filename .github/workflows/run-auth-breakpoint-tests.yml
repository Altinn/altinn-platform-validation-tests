name: Auth - run k6 breakpoint tests

on:
  workflow_dispatch:
    inputs:
      configFilePath:
        description: "Configuration file for the test runs"
        required: true
        default: "conf/auth-break.yaml"

      testName:
        type: choice
        description: "The test to run"
        options:
          - post-consent
          - get-authorized-parties-org
          - get-authorized-parties-sysuser
          - get-authorized-parties-user
          - pdp-authorize-enduser
          - get-connections-to
          - get-connections-from
          - get-access-packages-to
          - get-access-packages-from

      target_vus:
        description: "The target VUs to reach"
        required: false
        # default: 100

      duration:
        description: "How long should it take to reach the target_vus"
        required: false
        # default: 10m

      abortOnFail:
        description: "Should the test run stop as soon as the threshold fails"
        type: choice
        required: false
        options:
          - ""
          - "true"
          - "false"

      commandLineArgs:
        description: "Command line arguments to pass to the k6 run command"
        required: false
        default: ""

  schedule:
    - cron: "0 08 * * 1"
    - cron: "0 10 * * 1"
    - cron: "0 12 * * 1"
    - cron: "0 14 * * 1"
    - cron: "0 06 * * 2"
    - cron: "30 06 * * 2"
    - cron: "0 07 * * 2"
    - cron: "30 07 * * 2"
    - cron: "0 08 * * 2"

run-name: Auth - run breakpoint for ${{ inputs.testName }} - ${{ inputs.target_vus }} VUs for ${{ inputs.duration }}  
permissions:
  id-token: write
  contents: read

jobs:
  k6-breakpoint:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OIDC Login to Azure Public Cloud
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Populate kubeconfig with k6 context
        id: populate_kubeconfig_with_k6_context
        shell: bash
        run: |
          if ! az aks install-cli; then
            echo "Failed to install kubectl CLI"
            exit 1
          fi
          if ! az aks get-credentials --resource-group k6tests-rg --name k6tests-cluster; then
            echo "Failed to populate kubeconfig"
            exit 1
          fi
          if ! kubelogin convert-kubeconfig -l azurecli; then
            echo "Failed to convert kubeconfig"
            exit 1
          fi

      - name: Process CLI args
        shell: bash
        run: |
          TARGET_VUS="${TARGET_VUS:-}"
          DURATION="${DURATION:-}"
          ABORT_ON_FAIL="${ABORT_ON_FAIL:-}"
          COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:-}"

          OUTPUT=""

          if [ -n "$TARGET_VUS" ]; then
            OUTPUT="$OUTPUT --env BREAKPOINT_STAGE_TARGET=$TARGET_VUS"
          fi

          if [ -n "$DURATION" ]; then
            OUTPUT="$OUTPUT --env BREAKPOINT_STAGE_DURATION=$DURATION"
          fi

          if [ -n "$ABORT_ON_FAIL" ]; then
            OUTPUT="$OUTPUT --env BREAKPOINT_STAGE_ABORTONFAIL=$ABORT_ON_FAIL"
          fi

          if [ -n "$COMMAND_LINE_ARGS" ]; then
            OUTPUT="$OUTPUT $COMMAND_LINE_ARGS"
          fi

          # Remove leading whitespace
          OUTPUT=$(echo "$OUTPUT" | sed 's/^[[:space:]]*//')

          # Output the final string
          echo "COMMAND_LINE_ARGS=$OUTPUT" >> $GITHUB_ENV
        env:
          TARGET_VUS: ${{ inputs.target_vus }}
          DURATION: ${{ inputs.duration }}
          ABORT_ON_FAIL: ${{ inputs.abortOnFail }}
          COMMAND_LINE_ARGS: ${{ inputs.commandLineArgs }}

      - name: Generate k8s manifests
        uses: Altinn/altinn-platform/actions/generate-k6-manifests@main
        with:
          config_file: "${{ inputs.configFilePath || 'conf/auth-break.yaml' }}" # No inputs when running as a cron
          command_line_args: ${{ env.COMMAND_LINE_ARGS }}

      - name: Run Breakpoint for .dist/yt01-post-consent
        if: github.event.schedule == '0 08 * * 1'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-post-consent

      - name: Run Breakpoint for .dist/yt01-get-authorized-parties-org
        if: github.event.schedule == '0 10 * * 1'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-org

      - name: Run Breakpoint for .dist/yt01-get-authorized-parties-sysuser
        if: github.event.schedule == '0 12 * * 1'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-sysuser

      - name: Run Breakpoint for .dist/yt01-get-authorized-parties-user
        if: github.event.schedule == '0 14 * * 1'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-authorized-parties-user

      - name: Run Breakpoint for .dist/yt01-pdp-authorize-enduser
        if: github.event.schedule == '0 06 * * 2'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-pdp-authorize-enduser
    
      - name: Run Breakpoint for .dist/yt01-get-connections-to
        if: github.event.schedule == '30 06 * * 2'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-connections-to

      - name: Run Breakpoint for .dist/yt01-get-connections-from
        if: github.event.schedule == '0 07 * * 2'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-connections-from
    
      - name: Run Breakpoint for .dist/yt01-get-access-packages-to
        if: github.event.schedule == '30 07 * * 2'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-access-packages-to
             
      - name: Run Breakpoint for .dist/yt01-get-access-packages-from
        if: github.event.schedule == '0 08 * * 2'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-get-access-packages-from

      - name: Apply k8s manifests
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          kubectl --context k6tests-cluster apply --server-side -f .dist/yt01-${{ inputs.testName }}
