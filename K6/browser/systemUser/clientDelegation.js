import { browser } from 'k6/browser';
import { check, fail } from 'k6';
import { expect, EnterpriseTokenGenerator } from '../../commonImports.js';
import { LoginPage, ClientDelegationPage } from '../pages/index.js';
import { SystemUserRequestApiClient, SystemRegisterApiClient } from "../../clients/auth/index.js"
import { CreateNewSystem } from "../../api/tests/auth/systemRegister/index.js"
import { CreateAgentSystemUserRequest } from "../../api/tests/auth/systemUserRequest/index.js"


export const options = {
    scenarios: {
        ui: {
            executor: 'shared-iterations',
            vus: 1,
            iterations: 1,
            options: {
                browser: {
                    type: 'chromium',
                },
            },
        },
    },
};

const testData = [
    {
        role: "forretningsfoerer",
        accessPackageApiName: 'forretningsforer-eiendom',
        accessPackageDisplayName: 'Forretningsforer eiendom',
        user: {
            pid: "11866799328",
            org: "314239431"
        },
        customers: [{
            label: "SAMEIET UTSTRAKT STILLE LØVE",
            confirmation: "SAMEIET UTSTRAKT STILLE LØVE",
            orgnummer: "311707086"
        },
        {
            label: "SAMEIET FRYKTSOM RIK LØVE",
            confirmation: "SAMEIET FRYKTSOM RIK LØVE",
            orgnummer: "212426792"
        },
        {
            label: "SAMEIET KJÆR DYNAMISK LØVE",
            confirmation: "SAMEIET KJÆR DYNAMISK LØVE",
            orgnummer: "312630737"
        },]
    },
    {
        role: "regnskapsfoerer",
        accessPackageApiName: 'regnskapsforer-lonn',
        accessPackageDisplayName: 'Regnskapsfører lønn',
        user: {
            pid: "06857897380",
            org: "314250052"
        },
        customers: [{
            label: "FINTFØLENDE GJESTFRI HAMSTER",
            confirmation: "FINTFØLENDE GJESTFRI HAMSTER KF",
            orgnummer: "313334333"
        }]
    },
    {
        role: "revisor",
        accessPackageApiName: 'ansvarlig-revisor',
        accessPackageDisplayName: 'Ansvarlig revisor',
        user: {
            pid: "06857897380",
            org: "314250052"
        },
        customers: [{
            label: "LILLA BLØT TIGER",
            confirmation: "LILLA BLØT TIGER AS",
            orgnummer: "313169960"
        }]
    }
]

export default async function () {
    for (let i = 0; i < testData.length; i++) {
        const vendorId = "310547891";
        const clientId = `Client_${Date.now()}_${Math.random()}`;
        const description = {
            en: 'This is auto generated by an integration test. Some data is randomized, but some is not - like this description',
            nb: 'Integrasjonstest. Noe er randomisert her, men mye blir likt.',
            nn: 'integrasjonstest på nynorsk. Noe er randomisert her, men mye blir likt.',
        }

        const allowedRedirectUrls = ['https://www.vg.no']
        const accessPackages = [
            { urn: 'urn:altinn:accesspackage:regnskapsforer-med-signeringsrettighet' },
            { urn: 'urn:altinn:accesspackage:regnskapsforer-uten-signeringsrettighet' },
            { urn: 'urn:altinn:accesspackage:regnskapsforer-lonn' },
            { urn: 'urn:altinn:accesspackage:ansvarlig-revisor' },
            { urn: 'urn:altinn:accesspackage:revisormedarbeider' },
            { urn: 'urn:altinn:accesspackage:skattegrunnlag' },
            { urn: 'urn:altinn:accesspackage:forretningsforer-eiendom' },
        ]

        let user = testData[i].user
        let customers = testData[i].customers
        let role = testData[i].role
        let accessPackageApiName = testData[i].accessPackageApiName
        let accessPackageDisplayName = testData[i].accessPackageDisplayName

        const name = `k6browser-e2e-${role}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

        const options = new Map();
        options.set("env", __ENV.ENVIRONMENT)
        options.set("ttl", 3600);
        options.set("scopes", "altinn:authentication/systemregister.write altinn:authentication/systemuser.request.write altinn:authentication/systemuser.request.read altinn:authorization/authorize altinn:resourceregistry/resource.admin altinn:register/partylookup.admin")
        options.set("orgNo", "310547891");

        const tokenGenerator = new EnterpriseTokenGenerator(options)

        const systemRegisterApiClient = new SystemRegisterApiClient(__ENV.BASE_URL, tokenGenerator)
        const systemUserRequestApiClient = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

        let res = CreateNewSystem(
            systemRegisterApiClient,
            vendorId,
            name,
            clientId,
            description,
            [], // rights
            allowedRedirectUrls,
            accessPackages
        )

        const systemId = `${vendorId}_${name}`

        const externalRef = `${Math.random().toString(36)}${Date.now()}`
        let response = CreateAgentSystemUserRequest(systemUserRequestApiClient, externalRef, systemId, user.org, [{ urn: `urn:altinn:accesspackage:${accessPackageApiName}` }])
        response = JSON.parse(response)

        const page = await browser.newPage();
        let success = true;
        try {
            await page.goto(response.confirmUrl)

            const loginPage = new LoginPage(page);
            await loginPage.loginNotChoosingActor(user.pid);

            const clientDelegationPage = new ClientDelegationPage(page);

            // Approve system user and click it
            await clientDelegationPage.confirmAndCreateSystemUser(accessPackageDisplayName);

            // Verify logout by checking for login page elements
            await expect(loginPage.loginButton).toBeHidden();

            // Navigate to system user login page
            await loginPage.loginAs(user.pid, user.org);

            // Go to system user overview page
            const SYSTEMUSER_URL = __ENV.SYSTEMUSER_URL
            await page.goto(SYSTEMUSER_URL);

            const newTilgangsstyringsloesningen = page.getByRole('button', { name: 'Prøv ny tilgangsstyring' });
            await expect(newTilgangsstyringsloesningen).toBeVisible();
            await newTilgangsstyringsloesningen.click();
            //

            await expect(clientDelegationPage.systemUserLink(name)).toBeVisible();
            await clientDelegationPage.systemUserLink(name).click();

            await clientDelegationPage.openAccessPackage(accessPackageDisplayName);

            // Add customers to system user and remove them after so you can delete system user
            for (const customer of customers) {
                await clientDelegationPage.addCustomer(customer.label, customer.confirmation, customer.orgnummer,);
                await clientDelegationPage.removeCustomer(customer.confirmation);
            }

            // Cleanup: All clients need to be removed (api validation) to delete system user
            await clientDelegationPage.deleteSystemUser(name);
        } catch (error) {
            success = false
            fail(`Browser iteration failed: ${error}`);
        } finally {
            check(success, {
                "Browser Client Delegation": (success) => success
            })
            await page.close();
            browser.closeContext()
        }
    }
}
