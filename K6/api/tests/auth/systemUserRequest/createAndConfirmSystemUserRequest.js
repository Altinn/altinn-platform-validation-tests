import { check, group } from "k6"
import { SharedArray } from "k6/data";
import { vu } from 'k6/execution';
import { uuidv4, EnterpriseTokenGenerator, PersonalTokenGenerator } from '../../../../commonImports.js';
import { SystemUserRequestApiClient, SystemRegisterApiClient } from "../../../../clients/auth/index.js"
import { CreateSystemUserRequest, ApproveSystemUserRequest } from '../../../building_blocks/auth/systemUserRequest/index.js';
import { CreateNewSystem } from '../../../building_blocks/auth/systemRegister/index.js'

import { readCsv } from "../../../../helpers.js";

const systemUsersFilename = `../../../../testdata/auth/data-${__ENV.ENVIRONMENT}-all-customers.csv`;

const mySystemUsers = new SharedArray('systemUsers', function () {
    return readCsv(systemUsersFilename);
});

export default function () {

    const systemOwner = "713431400";

    const options = new Map();
    options.set("env", __ENV.ENVIRONMENT)
    options.set("ttl", 3600);
    options.set("scopes", "altinn:authentication/systemregister.write altinn:authentication/systemuser.request.write altinn:authentication/systemuser.request.read altinn:authorization/authorize")
    options.set("orgNo", systemOwner);

    const tokenGenerator
        = new EnterpriseTokenGenerator(options)

    const systemRegisterApiClient
        = new SystemRegisterApiClient(__ENV.BASE_URL, tokenGenerator)

    const vendorSystemUserRequestApiClient
        = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

    const resource = "ttd-dialogporten-performance-test-01";
    const name = `perftest${uuidv4()}`
    const systemId = `${systemOwner}_${name}`;
    const clientId = uuidv4()
    const description = {
        "en": "This is auto generated by an integration test. Some data is randomized, but some is not - like this description",
        "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
        "nn": "integrasjonstest pÃ¥ nynorsk. Noe er randomisert her, men mye blir likt."
    }
    const rights = [
        {
            "resource": [
                {
                    "value": resource,
                    "id": "urn:altinn:resource"
                }
            ]
        }
    ]

    const allowedRedirectUrls = ["https://digdir.no"]

    let res = CreateNewSystem(systemRegisterApiClient,
        systemOwner,
        name,
        clientId,
        description,
        rights,
        allowedRedirectUrls,
        [])
    check(res, {
        'CreateNewSystem - Creating a new System returns an ID': (r) => {
            const jsonBody = JSON.parse(r);
            const re = /^[a-z\d\-]+$/
            return re.test(jsonBody);
        }
    });

    group('Create and Confirm System User Request', function () {
        let res = CreateSystemUserRequest(
            vendorSystemUserRequestApiClient,
            systemId,
            mySystemUsers[vu.idInTest - 1].orgNo,//partyOrgNo,
            rights,
            allowedRedirectUrls[vu.idInTest - 1],
            []
        )
        check(res, {
            'CreateSystemUserRequest - Creating a new SystemUserRequest returns expected object': (r) => {
                const jsonBody = JSON.parse(r);
                return "id" in jsonBody &&
                    "externalRef" in jsonBody &&
                    "systemId" in jsonBody &&
                    "partyOrgNo" in jsonBody &&
                    "rights" in jsonBody &&
                    "status" in jsonBody &&
                    "redirectUrl" in jsonBody &&
                    "confirmUrl" in jsonBody;
            }
        });

        const requestId = JSON.parse(res).id

        const options = new Map();
        options.set("env", __ENV.ENVIRONMENT)
        options.set("ttl", 3600);
        options.set("scopes", "altinn:portal/enduser")
        options.set("userId", mySystemUsers[vu.idInTest - 1].userId);

        const tokenGenerator
            = new PersonalTokenGenerator(options)

        const approverSystemUserRequestApiClient
            = new SystemUserRequestApiClient(__ENV.BASE_URL, tokenGenerator)

        res = ApproveSystemUserRequest(approverSystemUserRequestApiClient,
            mySystemUsers[vu.idInTest - 1].partyId,
            requestId)
        check(res, {
            'ApproveSystemUserRequest - Approving the system user request is successful': (r) => {
                const jsonBody = JSON.parse(r);
                return true == jsonBody
            }
        });
    });
}
