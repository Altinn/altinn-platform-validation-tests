import { check, group } from "k6"
import { uuidv4, MaskinportenAccessTokenGenerator } from "../../../../commonImports.js"
import {
    CreateNewSystem,
    GetSystems,
    GetSystemById,
    UpdateVendorSystemRegister,
    UpdateRightsVendorSystemRegister,
    DeleteSystem,
    GetDeletedSystemByID
} from '../../../building_blocks/auth/systemRegister/index.js';
import { SystemRegisterApiClient } from "../../../../clients/auth/index.js"

function defaultObject() {
    const name = `NoeVisuelt${uuidv4()}`
    const allowedRedirectUrls = ["https://altinn.no"]
    const clientId = uuidv4()
    const vendorId = 312605031 // https://github.com/Altinn/altinn-authentication/blob/2b87e2eb6b11212c5aaf2032897bc9b8bc5e7519/test/Altinn.Platform.Authentication.SystemIntegrationTests/Resources/Testusers/testusers.at22.json
    const systemId = `${vendorId}_${name}`
    const description = {
        "en": "This is auto generated by an integration test. Some data is randomized, but some is not - like this description",
        "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
        "nn": "integrasjonstest på nynorsk. Noe er randomisert her, men mye blir likt."
    }
    const rights = [
        {
            "resource": [
                {
                    "value": "authentication-e2e-test",
                    "id": "urn:altinn:resource"
                }
            ]
        },
        {
            "resource": [
                {
                    "value": "vegardtestressurs",
                    "id": "urn:altinn:resource"
                }
            ]
        }
    ]

    return [name, allowedRedirectUrls, clientId, vendorId, systemId, description, rights]
}

export default function () {
    const options = new Map();
    options.set("scopes", "altinn:authentication/systemregister.write altinn:authentication/systemuser.request.write altinn:authentication/systemregister.write altinn:authentication/systemuser.request.read altinn:authentication/systemregister.admin")

    const tokenGenerator
        = new MaskinportenAccessTokenGenerator(options)

    const systemRegisterClient
        = new SystemRegisterApiClient(__ENV.BASE_URL, tokenGenerator)

    const [name, allowedRedirectUrls, clientId, vendorId, systemId, description, rights] = defaultObject();

    group('System Register CRUD Operations', function () {
        console.log("CreateNewSystem")
        let res = CreateNewSystem(systemRegisterClient, vendorId, name, clientId, description, rights, allowedRedirectUrls)
        check(res, {
            'CreateNewSystem - Creating a new System returns an ID': (r) => {
                const jsonBody = JSON.parse(r);
                const re = /^[a-z\d\-]+$/
                return re.test(jsonBody);
            }
        });

        console.log("GetSystems")
        res = GetSystems(systemRegisterClient)

        check(res, {
            'GetSystems - Available systems are returned': (r) => {
                const jsonBody = JSON.parse(r);
                return Array.isArray(jsonBody) &&
                    jsonBody.length > 0 &&
                    "systemId" in jsonBody[0] &&
                    "systemVendorOrgNumber" in jsonBody[0] &&
                    "systemVendorOrgName" in jsonBody[0] &&
                    "name" in jsonBody[0] &&
                    "description" in jsonBody[0] &&
                    "rights" in jsonBody[0] &&
                    "isVisible" in jsonBody[0] &&
                    jsonBody.filter((system) => system.systemId == systemId).length == 1;
            }
        });

        console.log("GetSystemById")
        res = GetSystemById(systemRegisterClient, systemId)

        check(res, {
            'GetSystemById - Correct system is returned': (r) => {
                const jsonBody = JSON.parse(r);
                return "systemId" in jsonBody && jsonBody.systemId == systemId &&
                    "systemVendorOrgNumber" in jsonBody &&
                    "systemVendorOrgName" in jsonBody &&
                    "name" in jsonBody && jsonBody.name.en == name && jsonBody.name.nb == name && jsonBody.name.nn == name &&
                    "description" in jsonBody && jsonBody.description.en == description.en && jsonBody.description.nb == description.nb && jsonBody.description.nn == description.nn &&
                    "rights" in jsonBody &&
                    "accessPackages" in jsonBody &&
                    "isVisible" in jsonBody
            }
        });

        console.log("UpdateSystem")
        const newDescription = {
            "en": "Simplified en description",
            "nb": "Integrasjonstest. Noe er randomisert her, men mye blir likt.",
            "nn": "integrasjonstest på nynorsk. Noe er randomisert her, men mye blir likt."
        }
        res = UpdateVendorSystemRegister(systemRegisterClient, systemId, vendorId, name, clientId, newDescription, rights, allowedRedirectUrls)
        check(res, {
            'UpdateVendorSystemRegister - Updating a System succeeds': (r) => {
                const jsonBody = JSON.parse(r)
                return "succeeded" in jsonBody &&
                    jsonBody.succeeded == true;
            }
        });

        const updateRightsBody = [
            {
                "action": "read",
                "resource": [
                    {
                        "id": "urn:altinn:resource",
                        "value": "authentication-e2e-test"
                    }
                ]
            },
            {
                "action": "read",
                "resource": [
                    {
                        "id": "urn:altinn:resource",
                        "value": "vegardtestressurs"
                    }
                ]
            }
        ];
        console.log("UpdateRightsVendorSystemRegister")
        res = UpdateRightsVendorSystemRegister(systemRegisterClient, systemId, updateRightsBody)
        check(res, {
            'UpdateRightsVendorSystemRegister - Body contains succeeded: true': (r) => {
                const jsonBody = JSON.parse(r);
                return "succeeded" in jsonBody &&
                    jsonBody.succeeded == true;
            }
        });

        console.log("DeleteSystem")
        res = DeleteSystem(systemRegisterClient, systemId)
        check(res, {
            'DeleteSystem - Body contains succeeded: true': (r) => {
                const jsonBody = JSON.parse(r);
                return "succeeded" in jsonBody &&
                    jsonBody.succeeded == true;
            }
        });

        console.log("GetDeletedSystemByID")
        // This requires the /vendor api as the non /vendor returns
        // a 200 ok and no way to validate the system has been deleted.
        res = GetDeletedSystemByID(systemRegisterClient, systemId)
        check(res, {
            'GetDeletedSystemByID - System is marked as deleted': (r) => {
                const jsonBody = JSON.parse(r);
                return "isDeleted" in jsonBody &&
                    jsonBody.isDeleted == true;
            }
        });

        console.log("GetSystems")
        res = GetSystems(systemRegisterClient)

        check(res, {
            'GetSystems - Deleted system is not part of the list': (r) => {
                const jsonBody = JSON.parse(r);
                const result = jsonBody.filter((system) => system.systemId == systemId);
                return result.length == 0
            }
        });
    });
}
